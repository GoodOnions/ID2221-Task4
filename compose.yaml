version: '3'
networks:
    goodonions:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: "10.0.0.0/24"

services:  


  spark_master:
    image: 'bitnami/spark:latest'
    container_name: spark_master
    hostname: spark_master
    user: root
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no    
    ports:
      - '7077:7077'
      - '4040:4040'
      - '8080:8080'
    volumes:
      - './spark/master/spark_data:/bitnami'
    networks:
      goodonions:
        ipv4_address: 10.0.0.2

  spark-worker:
    image: 'bitnami/spark:latest'
    container_name: spark_worker
    hostname: spark_worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=10.0.0.2:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark_master
    networks:
      goodonions:
        ipv4_address: 10.0.0.3


  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

    networks:
      goodonions:
        ipv4_address: 10.0.0.4

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    hostname: kafka
    ports:
      - '9093:9093'
    environment: 
    - KAFKA_BROKER_ID=1
    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_LISTENERS=INTERNAL://:9094,EXTERNAL://:9093
    - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9094,EXTERNAL://localhost:9093  #
    - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT        #INTERNAL PLAIN COSI ZOOKEEPER NON CAGA IL CAZZO 
    - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
    - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    - KAFKA_CFG_CONFLUENT_SUPPORT_METRICS_ENABLE=false
    - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
    - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    
    #- KAFKA_CREATE_TOPICS= 'message:2:2'
    depends_on:
      - zookeeper
    #volumes:
      #- ./kafka/data:/bitnami/kafka
    networks:
      goodonions:
        ipv4_address: 10.0.0.5

  # kafka2:
  #   image: 'bitnami/kafka:latest'
  #   container_name: kafka2
  #   hostname: kafka2
  #   ports:
  #     - '9096:9096'
  #   environment: 
  #   - KAFKA_BROKER_ID=2
  #   - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
  #   - KAFKA_LISTENERS=INTERNAL://:9095,EXTERNAL://:9096
  #   - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9095,EXTERNAL://localhost:9096  #
  #   - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT        #INTERNAL PLAIN COSI ZOOKEEPER NON CAGA IL CAZZO 
  #   - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
  #   - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
  #   - KAFKA_CFG_CONFLUENT_SUPPORT_METRICS_ENABLE=false
  #   - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
  #   - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
  #   - KAFKA_KRAFT_CLUSTER_ID = 01062000
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   #volumes:
  #     #- ./kafka/data:/bitnami/kafka
  #   networks:
  #     goodonions:
  #       ipv4_address: 10.0.0.50
        
  cassandra:
      image: 'bitnami/cassandra:latest'
      container_name: cassandra
      hostname: cassandra
      ports:
        - '9042:9042'      
      volumes:
        - ./cassandra/cass:/home
      networks:
        goodonions:
          ipv4_address: 10.0.0.6

  # cass1:
  #   image: cassandra
  #   container_name: cass1
  #   hostname: cass1
  #   mem_limit: 2g  
  #   healthcheck:
  #       test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
  #       interval: 5s
  #       timeout: 5s
  #       retries: 60
  #   ports:
  #     - '9042:9042'
  #   networks:
  #     goodonions:
  #       ipv4_address: 10.0.0.20
  #   volumes:
  #     - ./cassandra/cass1/dataDB:/var/lib/cassandra    
  #     - ./cassandra/cass1/etc:/etc/cassandra   # Use your own config files for full control
  #   environment: &environment    # Declare and save environments variables into "environment"
  #       CASSANDRA_SEEDS: "cass1,cass2"    # The first two nodes will be seeds
  #       CASSANDRA_CLUSTER_NAME: GoodOnions
  #       CASSANDRA_DC: Mars
  #       CASSANDRA_RACK: West
  #       CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
  #       CASSANDRA_NUM_TOKENS: 128

  # cass2:
  #   image: cassandra
  #   container_name: cass2
  #   hostname: cass2
  #   mem_limit: 2g
  #   healthcheck:
  #       test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
  #       interval: 5s
  #       timeout: 5s
  #       retries: 60
  #   networks:
  #     goodonions:
  #       ipv4_address: 10.0.0.21
  #   volumes:
  #     - ./cassandra/cass2/dataDB:/var/lib/cassandra    # This is the volume that will persist data for cass2 node
  #     - ./cassandra/cass2/etc:/etc/cassandra    # Use your own config files for full control
  #   environment: *environment    # point to "environment" to use the same environment variables as cass1
  #   depends_on:
  #     cass1:    # start cass2 only after cass1 is healthy
  #       condition: service_healthy

  # cass3:
  #   image: cassandra
  #   container_name: cass3
  #   hostname: cass3
  #   mem_limit: 2g
  #   healthcheck:
  #       test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
  #       interval: 5s
  #       timeout: 5s
  #       retries: 60
  #   networks:
  #     goodonions:
  #       ipv4_address: 10.0.0.22
  #   volumes:
  #     - ./cassandra/cass3/dataDB:/var/lib/cassandra    # This is the volume that will persist data for cass3 node
  #     - ./cassandra/cass3/etc:/etc/cassandra    # Use your own config files for full control
  #   environment: *environment    # point to "environment" to use the same environment variables as cass1
  #   depends_on:
  #     cass2:    # start cass3 only after cass1 is healthy
  #       condition: service_healthy # cass3 only after cass2
